# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Client {
  id: ID!
  name: String
  lists(
    where: ListWhereInput! = {}
    orderBy: [ListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [List!]
  listsCount(where: ListWhereInput! = {}): Int
}

input ClientWhereUniqueInput {
  id: ID
}

input ClientWhereInput {
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
  id: IDFilter
  name: StringFilter
  lists: ListManyRelationFilter
}

input ListManyRelationFilter {
  every: ListWhereInput
  some: ListWhereInput
  none: ListWhereInput
}

input ClientOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ClientUpdateInput {
  name: String
  lists: ListRelateToManyForUpdateInput
}

input ListRelateToManyForUpdateInput {
  disconnect: [ListWhereUniqueInput!]
  set: [ListWhereUniqueInput!]
  create: [ListCreateInput!]
  connect: [ListWhereUniqueInput!]
}

input ClientUpdateArgs {
  where: ClientWhereUniqueInput!
  data: ClientUpdateInput!
}

input ClientCreateInput {
  name: String
  lists: ListRelateToManyForCreateInput
}

input ListRelateToManyForCreateInput {
  create: [ListCreateInput!]
  connect: [ListWhereUniqueInput!]
}

type List {
  id: ID!
  title: String
  client: Client
  type: ListType
  uploads(
    where: FileUploadWhereInput! = {}
    orderBy: [FileUploadOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FileUpload!]
  uploadsCount(where: FileUploadWhereInput! = {}): Int
}

input ListWhereUniqueInput {
  id: ID
}

input ListWhereInput {
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  NOT: [ListWhereInput!]
  id: IDFilter
  title: StringFilter
  client: ClientWhereInput
  type: ListTypeWhereInput
  uploads: FileUploadManyRelationFilter
}

input FileUploadManyRelationFilter {
  every: FileUploadWhereInput
  some: FileUploadWhereInput
  none: FileUploadWhereInput
}

input ListOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input ListUpdateInput {
  title: String
  client: ClientRelateToOneForUpdateInput
  type: ListTypeRelateToOneForUpdateInput
  uploads: FileUploadRelateToManyForUpdateInput
}

input ClientRelateToOneForUpdateInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
  disconnect: Boolean
}

input ListTypeRelateToOneForUpdateInput {
  create: ListTypeCreateInput
  connect: ListTypeWhereUniqueInput
  disconnect: Boolean
}

input FileUploadRelateToManyForUpdateInput {
  disconnect: [FileUploadWhereUniqueInput!]
  set: [FileUploadWhereUniqueInput!]
  create: [FileUploadCreateInput!]
  connect: [FileUploadWhereUniqueInput!]
}

input ListUpdateArgs {
  where: ListWhereUniqueInput!
  data: ListUpdateInput!
}

input ListCreateInput {
  title: String
  client: ClientRelateToOneForCreateInput
  type: ListTypeRelateToOneForCreateInput
  uploads: FileUploadRelateToManyForCreateInput
}

input ClientRelateToOneForCreateInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
}

input ListTypeRelateToOneForCreateInput {
  create: ListTypeCreateInput
  connect: ListTypeWhereUniqueInput
}

input FileUploadRelateToManyForCreateInput {
  create: [FileUploadCreateInput!]
  connect: [FileUploadWhereUniqueInput!]
}

type FileUpload {
  id: ID!
  name: String
  file: FileFieldOutput
  fileType: FileType
  list: List
}

interface FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input FileUploadWhereUniqueInput {
  id: ID
}

type LocalFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input FileUploadWhereInput {
  AND: [FileUploadWhereInput!]
  OR: [FileUploadWhereInput!]
  NOT: [FileUploadWhereInput!]
  id: IDFilter
  name: StringFilter
  fileType: FileTypeWhereInput
  list: ListWhereInput
}

input FileUploadOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input FileUploadUpdateInput {
  name: String
  file: FileFieldInput
  fileType: FileTypeRelateToOneForUpdateInput
  list: ListRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input FileTypeRelateToOneForUpdateInput {
  create: FileTypeCreateInput
  connect: FileTypeWhereUniqueInput
  disconnect: Boolean
}

input ListRelateToOneForUpdateInput {
  create: ListCreateInput
  connect: ListWhereUniqueInput
  disconnect: Boolean
}

input FileUploadUpdateArgs {
  where: FileUploadWhereUniqueInput!
  data: FileUploadUpdateInput!
}

input FileUploadCreateInput {
  name: String
  file: FileFieldInput
  fileType: FileTypeRelateToOneForCreateInput
  list: ListRelateToOneForCreateInput
}

input FileTypeRelateToOneForCreateInput {
  create: FileTypeCreateInput
  connect: FileTypeWhereUniqueInput
}

input ListRelateToOneForCreateInput {
  create: ListCreateInput
  connect: ListWhereUniqueInput
}

type ListType {
  id: ID!
  name: String
  lists: List
  files(
    where: FileTypeWhereInput! = {}
    orderBy: [FileTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FileType!]
  filesCount(where: FileTypeWhereInput! = {}): Int
}

input ListTypeWhereUniqueInput {
  id: ID
}

input ListTypeWhereInput {
  AND: [ListTypeWhereInput!]
  OR: [ListTypeWhereInput!]
  NOT: [ListTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  lists: ListWhereInput
  files: FileTypeManyRelationFilter
}

input FileTypeManyRelationFilter {
  every: FileTypeWhereInput
  some: FileTypeWhereInput
  none: FileTypeWhereInput
}

input ListTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ListTypeUpdateInput {
  name: String
  lists: ListRelateToOneForUpdateInput
  files: FileTypeRelateToManyForUpdateInput
}

input FileTypeRelateToManyForUpdateInput {
  disconnect: [FileTypeWhereUniqueInput!]
  set: [FileTypeWhereUniqueInput!]
  create: [FileTypeCreateInput!]
  connect: [FileTypeWhereUniqueInput!]
}

input ListTypeUpdateArgs {
  where: ListTypeWhereUniqueInput!
  data: ListTypeUpdateInput!
}

input ListTypeCreateInput {
  name: String
  lists: ListRelateToOneForCreateInput
  files: FileTypeRelateToManyForCreateInput
}

input FileTypeRelateToManyForCreateInput {
  create: [FileTypeCreateInput!]
  connect: [FileTypeWhereUniqueInput!]
}

type FileType {
  id: ID!
  name: String
  extensions: String
  files(
    where: FileUploadWhereInput! = {}
    orderBy: [FileUploadOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FileUpload!]
  filesCount(where: FileUploadWhereInput! = {}): Int
  listType(
    where: ListTypeWhereInput! = {}
    orderBy: [ListTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ListType!]
  listTypeCount(where: ListTypeWhereInput! = {}): Int
}

input FileTypeWhereUniqueInput {
  id: ID
}

input FileTypeWhereInput {
  AND: [FileTypeWhereInput!]
  OR: [FileTypeWhereInput!]
  NOT: [FileTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  extensions: StringFilter
  files: FileUploadManyRelationFilter
  listType: ListTypeManyRelationFilter
}

input ListTypeManyRelationFilter {
  every: ListTypeWhereInput
  some: ListTypeWhereInput
  none: ListTypeWhereInput
}

input FileTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  extensions: OrderDirection
}

input FileTypeUpdateInput {
  name: String
  extensions: String
  files: FileUploadRelateToManyForUpdateInput
  listType: ListTypeRelateToManyForUpdateInput
}

input ListTypeRelateToManyForUpdateInput {
  disconnect: [ListTypeWhereUniqueInput!]
  set: [ListTypeWhereUniqueInput!]
  create: [ListTypeCreateInput!]
  connect: [ListTypeWhereUniqueInput!]
}

input FileTypeUpdateArgs {
  where: FileTypeWhereUniqueInput!
  data: FileTypeUpdateInput!
}

input FileTypeCreateInput {
  name: String
  extensions: String
  files: FileUploadRelateToManyForCreateInput
  listType: ListTypeRelateToManyForCreateInput
}

input ListTypeRelateToManyForCreateInput {
  create: [ListTypeCreateInput!]
  connect: [ListTypeWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createClient(data: ClientCreateInput!): Client
  createClients(data: [ClientCreateInput!]!): [Client]
  updateClient(where: ClientWhereUniqueInput!, data: ClientUpdateInput!): Client
  updateClients(data: [ClientUpdateArgs!]!): [Client]
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteClients(where: [ClientWhereUniqueInput!]!): [Client]
  createList(data: ListCreateInput!): List
  createLists(data: [ListCreateInput!]!): [List]
  updateList(where: ListWhereUniqueInput!, data: ListUpdateInput!): List
  updateLists(data: [ListUpdateArgs!]!): [List]
  deleteList(where: ListWhereUniqueInput!): List
  deleteLists(where: [ListWhereUniqueInput!]!): [List]
  createFileUpload(data: FileUploadCreateInput!): FileUpload
  createFileUploads(data: [FileUploadCreateInput!]!): [FileUpload]
  updateFileUpload(
    where: FileUploadWhereUniqueInput!
    data: FileUploadUpdateInput!
  ): FileUpload
  updateFileUploads(data: [FileUploadUpdateArgs!]!): [FileUpload]
  deleteFileUpload(where: FileUploadWhereUniqueInput!): FileUpload
  deleteFileUploads(where: [FileUploadWhereUniqueInput!]!): [FileUpload]
  createListType(data: ListTypeCreateInput!): ListType
  createListTypes(data: [ListTypeCreateInput!]!): [ListType]
  updateListType(
    where: ListTypeWhereUniqueInput!
    data: ListTypeUpdateInput!
  ): ListType
  updateListTypes(data: [ListTypeUpdateArgs!]!): [ListType]
  deleteListType(where: ListTypeWhereUniqueInput!): ListType
  deleteListTypes(where: [ListTypeWhereUniqueInput!]!): [ListType]
  createFileType(data: FileTypeCreateInput!): FileType
  createFileTypes(data: [FileTypeCreateInput!]!): [FileType]
  updateFileType(
    where: FileTypeWhereUniqueInput!
    data: FileTypeUpdateInput!
  ): FileType
  updateFileTypes(data: [FileTypeUpdateArgs!]!): [FileType]
  deleteFileType(where: FileTypeWhereUniqueInput!): FileType
  deleteFileTypes(where: [FileTypeWhereUniqueInput!]!): [FileType]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  clients(
    where: ClientWhereInput! = {}
    orderBy: [ClientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Client!]
  client(where: ClientWhereUniqueInput!): Client
  clientsCount(where: ClientWhereInput! = {}): Int
  lists(
    where: ListWhereInput! = {}
    orderBy: [ListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [List!]
  list(where: ListWhereUniqueInput!): List
  listsCount(where: ListWhereInput! = {}): Int
  fileUploads(
    where: FileUploadWhereInput! = {}
    orderBy: [FileUploadOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FileUpload!]
  fileUpload(where: FileUploadWhereUniqueInput!): FileUpload
  fileUploadsCount(where: FileUploadWhereInput! = {}): Int
  listTypes(
    where: ListTypeWhereInput! = {}
    orderBy: [ListTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ListType!]
  listType(where: ListTypeWhereUniqueInput!): ListType
  listTypesCount(where: ListTypeWhereInput! = {}): Int
  fileTypes(
    where: FileTypeWhereInput! = {}
    orderBy: [FileTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FileType!]
  fileType(where: FileTypeWhereUniqueInput!): FileType
  fileTypesCount(where: FileTypeWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
